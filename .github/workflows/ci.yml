name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: kitchencoach_test
        ports: ['5432:5432']
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: npm run db:migrate --workspace=server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/kitchencoach_test

    - name: Seed database
      run: npm run seed --workspace=server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/kitchencoach_test
    
    - name: 🔍 Lint code
      run: npm run lint
    
    - name: 🔧 Type check
      run: npm run type-check
    
    - name: 🧪 Run tests with coverage
      run: npm run test -- --run --coverage
    
    - name: 🏗️ Build project
      run: npm run build

    - name: ♿ Accessibility audit
      run: |
        mkdir -p reports
        npx axe ./client/dist > reports/axe-report.txt

    - name: 🚦 Lighthouse performance budget
      run: |
        mkdir -p reports
        npx http-server ./client/dist -p 4173 &
        SERVER_PID=$!
        sleep 5
        npx lighthouse http://localhost:4173 \
          --quiet --chrome-flags="--headless" \
          --budget-path=budget.json \
          --output html --output-path reports/lighthouse-report.html
        kill $SERVER_PID

    - name: 📊 Bundle size analysis
      run: |
        mkdir -p reports
        echo "## Bundle Size Report" > reports/bundle-size.md
        echo "Generated on: $(date)" >> reports/bundle-size.md
        echo "" >> reports/bundle-size.md
        
        if [ -d "client/dist/assets" ]; then
          echo "### Client Bundle Sizes" >> reports/bundle-size.md
          echo "\`\`\`" >> reports/bundle-size.md
          ls -lah client/dist/assets/ | grep -E '\.(js|css)$' | awk '{print $9 " - " $5}' >> reports/bundle-size.md
          echo "\`\`\`" >> reports/bundle-size.md
          echo "" >> reports/bundle-size.md
          
          TOTAL_SIZE=$(du -sh client/dist | cut -f1)
          echo "**Total bundle size: $TOTAL_SIZE**" >> reports/bundle-size.md
          echo "" >> reports/bundle-size.md
          
          # Check against budget (300KB warning threshold)
          TOTAL_BYTES=$(du -sb client/dist | cut -f1)
          BUDGET_BYTES=307200  # 300KB
          if [ $TOTAL_BYTES -gt $BUDGET_BYTES ]; then
            echo "⚠️ **Bundle size exceeds 300KB budget**" >> reports/bundle-size.md
          else
            echo "✅ **Bundle size within 300KB budget**" >> reports/bundle-size.md
          fi
        fi

    - name: 🔒 Security audit (production dependencies)
      run: npm audit --audit-level high --omit dev
    
    - name: 📈 Code quality analysis  
      run: |
        mkdir -p reports
        npx madge --extensions ts,tsx --circular . > reports/circular-deps.txt 2>&1
        npx ts-unused-exports ./client/tsconfig.json --exitWithCount --ignoreFiles "**/*.stories.tsx" > reports/unused-exports.txt 2>&1 || echo "Unused exports check completed"
        echo "Complexity analysis: Using TypeScript compiler for code quality metrics" > reports/complexity.txt

    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-node-${{ matrix.node-version }}-${{ github.run_number }}
        path: |
          reports/
          client/coverage/
          client/dist/
        retention-days: 7
    
    - name: 📚 Build Storybook
      run: npm run build-storybook --workspace=client

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: 🔒 Full security audit
      run: npm audit --audit-level high --omit dev
    
    - name: 🐍 Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

